#import "iostream.bah"
#import "string.bah"
#import "flags.bah"
#import "exec.bah"
#import "time.bah"
#import "rope.bah"
#import "json.bah"
#import "path.bah"

///////////////////////OS SPECIFIC THINGS////////////////////////
#linux {
    BAH_DIR = "/opt/bah/"
    BAH_OS = "linux"
    BAH_CC = "gcc"
    const BAH_HOST_OS = "linux"
}
#darwin {
    BAH_DIR = "/opt/bah/"
    BAH_OS = "darwin"
    BAH_CC = "clang"
    const BAH_HOST_OS = "darwin"
}

#windows {
    BAH_DIR = "C:/Bah/"
    BAH_OS = "windows"
    BAH_CC = "gcc"
    const BAH_HOST_OS = "windows"
}
//////////////////////BUILD SPECIFIC THINGS//////////////////////
const BAH_VERSION = "v1.51 (build 191)"

debug = false
verboseRuntime = false
isObject = false
isUnsafe = false
isOptimized = false
noticeEnabled = true
nativeMemenabled = false
lightGCenabled = false
isFixMeEnabled = false
noImport = false

execName = "bah"
isSubObject = false
isImportedSubObject = false

#include "./globals.bah"

#include "./lexer.bah"
#include "./type.bah"
#include "./errors.bah"
#include "./parser.bah"
#include "./declarative.bah"

//This function is called on segfaults, it provides a bit more help on what went wrong.
memErrHandle() str {
    r = "file: "+compilerState.currentFile
    if currentFn != null {
        r += "\nfunction: "+currentFn.name+"()"
    }
    return r
}

//Entry point of the program.
main(args []str) int {
    onMemoryError = memErrHandle
    ogDir = getCurrentPath()

    execName = args[0] //for calling a sub-process for compiling imports

    //If the executable is not called from the path, get its absolute path for calling it when compiling objects with '#import'.
    if execName[0] == '.' || execName[0] == '/' {
        execName = absPath(execName)
    }

    flags = flags{}

    //output type
    flags.addString("o", "Name of the file to output.")
    flags.addBool("c", "Translate bah file to C instead of compiling it.")
    flags.addBool("v", "Show version of the compiler.")
    flags.addBool("l", "Compile as a library.")
    flags.addBool("object", "Compile as an object.")
    flags.addBool("n", "Disables notices while keeping warnings enabled.")
    #linux {
        flags.addBool("d", "Compile as a dynamic executable. (useful if you are using a library that is only available shared but might reduce portability).")
    }
    #windows {
        flags.addBool("d", "Compile as a dynamic executable. (useful if you are using a library that is only available shared but might reduce portability).")
    }

    //cross compiler
    flags.addString("target", "Select the target OS for cross compilling (linux, windows, darwin), default: "+BAH_OS+".")
    flags.addString("bahDir", "If your Bah directory is not the default one ("+BAH_DIR+").")
    flags.addString("CC", "To change the C compiler used, default: "+BAH_CC+".")

    
    //optimizatioms
    flags.addBool("unsafe", "Compile without safety checking. This will make for faster executable but if your program crashes, it will show less informations.")
    flags.addBool("nobuiltin", "Does not include the builtin library (be really carefull, your program WILL break).")
    flags.addBool("optimize", "Includes optimized functions")
    flags.addBool("noImports", "Redirects all #import to #include. Usefull for cross-compilation. This is enabled by -c.")

    //memory management
    flags.addBool("rcp", "Enables RCP (reference counter) instead of the garbage collector. Warning: if you are using self-reference, this will lead to memory leaks!")
    flags.addBool("fastrcp", "Enables RCP without leak detection. It is recommended to test you programs with the -rcp flag to test for leak detection before using this flag.")
    flags.addBool("lightGC", "Enables the really light weight with no dependecy garbage collector. This one is not as complex as the default one, it is though not as robust.")
    flags.addBool("nativeMem", "Disable any memory management. WARNING: this will cause insane memory leaks.")
    
    //debugging
    flags.addBool("fixMe", "Enables runtime debugging engine, useful for segfaults... Note that your program will be slower and use more memory, this is only a debug option.")
    flags.addBool("debug", "Enables verbose json output.")
    flags.addBool("verboseRuntime", "Enables verbose runtime, a debug mode of the compiled program. (obsolete)")
    flags.addBool("verboseCC", "Enables verbose C compiler output, USE IN LAST RESORT.")
    flags.parse(args)

    lightGCenabled = flags.isSet("lightGC") == 1
    nativeMemenabled = flags.isSet("nativeMem") == 1
    isFixMeEnabled = flags.isSet("fixMe") == 1
    noImport = flags.isSet("noImports") == 1 || flags.isSet("c") == 1

    if isFixMeEnabled {
        noImports = true
    }

    if flags.isSet("target") == 1 {
        BAH_OS = flags.get("target")
        println("Build target: "+BAH_OS)
    }
    if flags.isSet("bahDir") == 1 {
        BAH_DIR = flags.get("bahDir")
        if BAH_DIR[len(BAH_DIR)-1] != '/' {
            BAH_DIR += "/"
        }
        println("Bah directory: "+BAH_DIR)
    }
    if flags.isSet("CC") == 1 {
        BAH_CC = flags.get("CC")
        println("C compiler: "+BAH_CC)
    }

    if flags.isSet("verboseRuntime") {
        println("-verboseRuntime is obsolete.")
        exit(1)
    }

    noticeEnabled = flags.isSet("n") == 0

    RCPlevel = 0
    if flags.isSet("rcp") {
        RCPlevel = 1
    } else if flags.isSet("fastrcp") {
        RCPlevel = 2
    } else if lightGCenabled {
        RCPlevel = 3
    }

    verboseRuntime = flags.isSet("verboseRuntime") == 1
    debug = flags.isSet("debug") == 1
    isObject = flags.isSet("object") == 1
    isUnsafe = flags.isSet("unsafe") == 1
    isOptimized = flags.isSet("optimize") == 1

    if debug == true {
        debugStart() //for IDE purposes
    }

    RCPenabled = flags.isSet("rcp") == 1 || flags.isSet("fastrcp")

    if flags.isSet("v") == 1 {
        println("Bah compiler version: "+BAH_VERSION+".\nAlois Laurent Boe.")
        return 0
    }

    if flags.isSet("c") == 1 && flags.isSet("l") == 1 {
        panic("Cannot use -c (to translate to C code) and -l (to compile as a library) at the same time.")
    }

    INIT = rope("") //C code of the __BAH_init function
    OUTPUT = rope("#define noCheck(v) v\n")

    elems = new Elems //the struct containning the state of the code (vars, funcs...) at every scopes

    //if the file is an object, we dont want to declare an entry point.
    
    if noImport == false {
        readCache()
    }

    //opening the file to compile
    fileName = absPath(args[1])
    compilerState.currentFile = fileName
    fs = fileStream{}
    fs.open(fileName, "r")
    f = fs.readContent()
    if fs.isValid() == 0 || fs.getSize() == 0 {
        println("Could not open file '"+args[1]+"'.")
        exit(1)
    }
    fs.close()
    startTime = getTimeUnix() //for timming compilation time
    tokens = lexer(f) //tokenizing the first file

    //includes the builtin libraries
    if flags.isSet("nobuiltin") == 0 && string(fileName).hasSuffix(".bahstrp") == false {
        if noImport == false {
            importFile("builtin.bah", null, elems)
        } else {
            if includeFile("builtin.bah", elems) == false {
                panic("Could not find std-libs, please check '"+BAH_DIR+"'")
            }
        }
    }

    if flags.isSet("l") == 0 {
        if isObject == true {
            shouldOnlyDecl = true
        } else {
            OUTPUT += rope("
            struct Bah_Array_Type* argsToArr(char** a,long int l);
            int main(int argc, char ** argv) {
            initiateMemory();
            __BAH_init();
            long int r =  __BAH__main(argsToArr(argv, argc));
            return r;
            };
            #define main(v) __BAH__main(v)
            ")
        }
    }


    if len(tokens) == 0 {
        println("File '"+fileName+"' not recognized.")
        exit(1)
    }

    if isFixMeEnabled == true {
        if includeFile("fixme.bah", elems) == false {
            panic("Could not find fixme.bah, please check '"+BAH_DIR+"'")
        }
    }

    shouldOnlyDecl = false //should also set values to vars, funcs...

    //if the file is being compiled as a lib, remove all its content and declare everything (builtin.bah)
    if flags.isSet("l") == 1 {
        OUTPUT = rope("")
        declareAll(elems)
    }

    compilerState.currentDir = getDirFromFile(fileName) //for handling includes
    parseLines(tokens, elems) //parse the first file

    //registers functions names
    if isObject == false && isUnsafe == false {
        l = 0
        i=0; for i < len(elems.fns), i++ {
            fn = elems.fns[i]
            if fn.isBinding == true {
                continue
            }
            l++
        }
        OUTPUT += rope("volatile struct __Bah_fnName_mapper __tmp____Bah_fnNames["+intToStr(l)+"];")
        j=0
        i=0; for i < len(elems.fns), i++ {
            fn = elems.fns[i]
            if fn.isBinding == true {
                continue
            }
            name = fn.name
            if fn.from != "" && strHasPrefix(name, fn.from+"__") {
                n = string(name)
                n.trimLeft(len(fn.from)+2)
                name = fn.from+"."+n.str()
            }
            INIT += rope("
            __tmp____Bah_fnNames["+intToStr(j)+"].n = "+strLitteralToBahStr("\""+name+"\"")+";
            __tmp____Bah_fnNames["+intToStr(j)+"].p = "+fn.name+";\n")
            j++
        }
        INIT += rope("
        __Bah_fnNames->data = __tmp____Bah_fnNames;
        __Bah_fnNames->length = "+intToStr(l)+";")
    }

    makeInit() //makes the init function

    //if we run in debug mode, we dont want to compile the program
    if debug == true {
        debugEnd() //prints the file end, if not printed it will be interpreted as an error occuring
        return 0
    }

    //printing parsing statistics
    if isObject == false {
        totalTime = getTimeUnix() - startTime
        println("Parsed. ("+intToStr(totalLines)+" lines, total time: "+intToStr(totalTime / 1000000)+"ms, lexer time: "+intToStr(totalLexerTime / 1000000)+"ms)\e[0m")
    }

    //waiting for all imports to finish compiling
    for currentCompiling > 0, currentCompiling-- {
        ok = <- doneCompilingChan
    }

    if noImport == false {
        writeCache()
    }
    setCurrentPath(ogDir)

    //setting the output name
    if flags.isSet("o") == 1 {
        fileName = flags.get("o")
    } else {
        outFileName = string(args[1])
        outFileName.trimRight(4)
        fileName = outFileName.str()
    }

    //setting the linking mode
    isStatic = "-static"
    if flags.isSet("d") == 1 || BAH_OS == "darwin" {
        isStatic = ""
    }

    //making an executable from the C code
    if flags.isSet("c") == 0 {
        //if file is an object, do not link it
        obj = ""
        if flags.isSet("object") == 1 {
            fileName += ".o"
            obj = "-c"
        }

        randFileName = "-x c - -x none" //reading from stdin

        remOpt = ""
        if BAH_CC == "gcc" {
            remOpt = "-fno-dce -fno-dse -fno-tree-dce -fno-tree-dse"
        }

        gccArgs = BAH_CC+" -I \""+BAH_DIR+"libs/"+BAH_OS+"/include/\" -L \""+BAH_DIR+"libs/"+BAH_OS+"/\" "+ randFileName+ " "+isStatic+" "+obj+" -w -O1 "+remOpt+" -g1 -o "+fileName //the compiler (C compiler) command
        
        if flags.isSet("l") == 1 {
            gccArgs += " -c"
        }

        //adding C libraries
        cLibs = compilerState.cLibs
        i=0;for i < len(cLibs) {
            l = cLibs[i]
            gccArgs += " -" + l
            i++
        }

        //executes the C compiler
        cmd = command(gccArgs)
        cmd.input = OUTPUT.toStr()
        #linux {
            if flags.isSet("verboseCC") == 0 {
                cmd.error = false
            }
        }
        if flags.isSet("verboseCC") == 1 {
            println(cmd.run())
        } else {
            cmd.run()
        }
        
        if cmd.status != 0 {   
            println("\e[1;31m[CC-ERROR]\e[0m\nCould not compile.")
            return 1
        }

        if flags.isSet("l") == 1 {
            cmd = command("ar rcs "+fileName+".a "+fileName)
            cmd.run()
        }

    } else {
        //making the C file without compiling it
        if flags.isSet("o") == 0 {
            fileName += ".c"
        }

        gccArgs = BAH_CC+" -I \""+BAH_DIR+"libs/"+BAH_OS+"/include/\" -L \""+BAH_DIR+"libs/"+BAH_OS+"/\" "+ fileName+ " "+isStatic+" -O1 -w "
        cLibs = compilerState.cLibs
        i=0;for i < len(cLibs) {
            l = cLibs[i]
            gccArgs += " -" + l
            i++
        }


        OUTPUT = rope("//COMPILE WITH: '"+gccArgs+"'\n") + OUTPUT
        fs = fileStream{}
        fs.open(fileName, "w")
        fs.writeFile(OUTPUT.toStr())
        fs.close()
    }

    //print that the compiler finished is job without any error
    if isObject == false {
        totalTime = getTimeUnix() - startTime
        println("\e[1;32mDone. (compiled in "+intToStr(totalTime / 1000000)+"ms)\e[0m")
    }
    return 0
}

